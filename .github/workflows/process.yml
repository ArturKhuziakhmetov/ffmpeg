# git commit -am.; git push -q; yq '.files|=(sort_by(.duration)|reverse)' -oj -I0 "jobs/$title.yaml" | gh workflow run process.yml -F data=@- -f title="$title"

name: process
run-name: ${{ inputs.title }}
on:
  workflow_dispatch:
    inputs:
      title:
        required: true
      data:
        required: true

jobs:
  process:
    name: ${{ matrix.file }}
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include: ${{ fromJson(inputs.data).files }}

    steps:
      - uses: actions/cache/restore@v4
        with:
          key: programs-
          restore-keys: programs-
          path: /home/runner/.local/bin

      - name: Download
        run: rclone copy "${{ vars.INPUT_ROOT }}/${{ inputs.title }}" . --include="${{ matrix.file }}" -v

      - name: Process
        run: |
          ifile="${{ matrix.file }}"
          ofile="${ifile%.*}.mkv"
          log="out/info/${ofile%.*}.log"

          mkdir -p out/{info,images2,start2,end2} tmp
          sudo apt install -yqq libfuse2 &> /dev/null &
          shopt -s globstar; mv -n **/"$ifile" .

          ops=$( jq -r '
            (. * .files[${{ strategy.job-index }}]) | del(.files) | 
            . as {$duration, $vtrim} | .ops |
            if (.to and .to < 0) then .to += $duration end |
            if (.vf.trim.end and .vf.trim.end < 0) then .vf.trim.end += $duration end |
            .vf.trim.start = (.vf.trim.start // ((.ss // 0) + $vtrim)) |
            .vf.trim.end = (.vf.trim.end // ((.to // $duration) - $vtrim)) |
            .vf[] |= ([ to_entries[] | "\(.key)=\(.value)" ] | join(":")) |
            .vf   |= ([ to_entries[] | "\(.key)=\(.value)" ] | join(",")) |
            to_entries[] | "-" + .key, .value' << 'EOF'
            ${{ inputs.data }}EOF
          )
          
          echo $ops
          echo ${{ vars.PRESET }} | base64 -d | tee preset out/info/preset.txt

          FFREPORT=file=%p.log:level=32 \
          ffmpeg -hide_banner -nostdin -nostats -benchmark \
          -i "$ifile" $ops -fpre preset "tmp/$ofile"

          ffmpeg -v 24 -i "tmp/$ofile" -t 10 -c copy out/start2/"$ofile"
          ffmpeg -v 24 -sseof -10 -i "tmp/$ofile" -c copy out/end2/"$ofile"
          ffmpeg -v 24 -an -i "tmp/$ofile" -frames 1 -update 1 "out/images2/$ofile".png

          cat preset *.log > "$log"
          wait
          { stat -c "%s %n" "tmp/$ofile"
            mkvmerge -o "out/$ofile" "tmp/$ofile"
            stat -c "%s %n" "out/$ofile"
          } | tee -a "$log"

      - name: Upload
        run: rclone copy out "${{ vars.OUTPUT_ROOT }}/${{ inputs.title }}" -v --no-update-modtime
