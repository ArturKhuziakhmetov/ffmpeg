# git commit -am.; git push -q; gh workflow run metadata.yml -f title="$title" 

name: metadata
run-name: ${{ inputs.title }}
on:
  workflow_dispatch:
    inputs:
      title:
        required: true
      include:
        default: '*.m??'
      t:
        default: 20
jobs:
  job:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/cache/restore@v4
        with:
          key: bin
          path: /home/runner/.local/bin

      - name: Download
        run: |
          rclone copy "${{ vars.INPUT_ROOT }}/${{ inputs.title }}" . --include='${{ inputs.include }}' --stats-one-line --transfers=16 -v &
          sudo apt install -yqq libfuse2 &> /dev/null 
          wait

      - name: Process
        run: |
          shopt -s globstar
          mv **/${{ inputs.include }} .
          mkdir -p out/{info,images,start,end,crop,tmp}

          for file in ${{ inputs.include }}; do

          ffmpeg -v 24 -i "$file" -t ${{ inputs.t }} -c copy out/start/"$file"
          ffmpeg -v 24 -sseof -${{ inputs.t }} -i "$file" -c copy out/end/"$file"
          ffmpeg -v 24 -an -ss 60 -i "$file" -frames 1 -update 1 out/images/"$file".png

          curl -sOF "file=@\"out/images/$file.png\"" http://helpman.komtera.lt/predict
          source <(yq '.results[0]' -os predict)

          crop=$(magick out/images/"$file".png -crop "%[fx:w*$width]x%[fx:h*$height]+%[fx:w*($xc-$width/2)]+%[fx:h*($yc-$height/2)]" -write out/crop/"$file".png -format '%wx%h%X%Y' info:-)

          duration=$(ffprobe -v 24 -show_entries format=duration -of csv=p=0 "$file")

          silence=$(ffmpeg -v 24 -vn -i "$file" -af silencedetect=d=1:n=1e-3,ametadata=mode=print:file=silence -f null -)

          ss=$(grep -m1 end silence | cut -c19-)
          printf -v ss %.6f ${ss:-0}

          to=$(grep start silence | tail -1 | cut -c21-)
          printf -v to %.6f $(bc <<< ${to:-$duration}-$duration)

          { printf '%s@' $crop $ss $to $duration "$file" $(ffprobe -v 24 -select_streams v -show_entries stream=width,height,r_frame_rate,avg_frame_rate -of csv=p=0:s=@ "$file"); echo; } >> metadata

          cat << EOF >> out/tmp/files.yaml
          - file: "$file"
            duration: $duration
          EOF

          done

          column -ts@ -N crop,ss,to,duration,file,w,h,fps,afps -O 8,9,6,7 -R2,3,4 -E5 metadata | tee out/info/metadata.txt

      - name: Upload
        run: rclone copy out "${{ vars.OUTPUT_ROOT }}/${{ inputs.title }}" --stats-one-line --no-update-modtime --transfers=16 -v
